rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Allow public read access to settings, restrict write to admin
    match /settings/{settingId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Allow public read access to gifts, restrict write to admin
    // Note: selecting a gift (user action) is handled by updating status, which needs specific rules if done directly.
    // Currently, selectGift runs server-side, implicitly using admin privileges if not secured.
    // Suggestion/Add item actions also likely need rules if triggered directly by users.
    match /gifts/{giftId} {
      allow read: if true;
      // Allow creating/updating/deleting gifts only for admins
      allow write: if isAdmin();
      // Allow users to 'select' a gift (specific fields) - More complex rule if needed client-side
      // allow update: if request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'selectedBy', 'selectionDate']) && request.resource.data.status == 'selected';
      // Allow users to 'suggest' an item (create) - More complex rule if needed client-side
      // allow create: if request.auth != null && request.resource.data.status == 'selected';
    }

    // Allow read access to all selections and allow authenticated users to write on it.
    // This collection doesn't seem to be used in the current code (gift items store selection status directly).
    // If used, review permissions.
    match /selections/{selectionId} {
      allow read: if true;
      allow write: if request.auth != null; // Or check if user owns the selection?
    }

    // Restrict access to users collection, only allow the correct user and the admin to read and write
    match /users/{userId} {
      allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin());
    }

    // Function to check if user is admin based on their UID
    function isAdmin() {
      // Replace with actual Admin User UIDs from Firebase Authentication
      return request.auth != null && request.auth.uid in ['JoO9fy5roDY6FTtqajp1UG8aYzS2', 'VnCKbFH5nrYijsUda0fhK3HdwSF2'];
    }
  }
}

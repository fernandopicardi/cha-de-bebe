rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Settings document: Anyone can read, only admin can write
    match /settings/main {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Gifts collection
    match /gifts/{giftId} {
      // Anyone can read gifts
      allow read: if true;

      // Anyone can suggest a gift (create a new one marked as selected)
      // Need name, category, status='selected', selectedBy
      allow create: if request.resource.data.status == 'selected'
                       && request.resource.data.selectedBy != null
                       && request.resource.data.name != null
                       && request.resource.data.category != null;

      // Anyone can select an available gift (update status)
      // Need status='selected', selectedBy. Check incoming data only.
      allow update: if request.resource.data.status == 'selected'
                       && request.resource.data.selectedBy != null
                       // Check *current* status is available
                       && resource.data.status == 'available';

      // Admins can perform any update or delete
      // This needs to be broad enough for all admin actions (revert, mark as not needed, edit)
      // Note: Allowing general update for admins might override the specific 'select' rule logic,
      // but it's necessary for admin edits. Ensure client-side logic is robust.
      allow update, delete: if isAdmin();
    }

    // User profiles (if used - placeholder)
    match /users/{userId} {
      allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin());
    }

    // Admin check function
    function isAdmin() {
      // Check if the user is authenticated and their UID is in the admin list
      return request.auth != null && request.auth.uid in ['JoO9fy5roDY6FTtqajp1UG8aYzS2', 'VnCKbFH5nrYijsUda0fhK3HdwSF2'];
      // IMPORTANT: Replace with actual Admin User IDs from Firebase Authentication
    }
  }
}
